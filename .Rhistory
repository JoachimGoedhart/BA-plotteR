sessionInfo()
runApp('surfdrive/Shiny-project/VolcaNoseR')
x <- c("1,2")
strsplit(x,",")
as.numeric(strsplit(x,","))
unlist(strsplit(x,","))
runApp('surfdrive/Shiny-project/VolcaNoseR')
install.packages('cowplot')
N<-50
g.progress<- function(i=10,maxi=N){
ggplot(data=data.frame(x="progress",y=i/maxi),
aes(x=x,y=y))+geom_bar(stat="identity",color=NA,fill="#0033a0",alpha=0.82)+
geom_bar(stat="identity", data=data.frame(x="progress",y=1),
color="black",fill=NA)+
theme_void()+scale_y_continuous(limits=c(0,1))+
theme(plot.title=element_text(size=8,hjust=0.1))+
labs(title="Animation progress")+
coord_flip()
}
g.progress(10)
library(ggplot)
g.progress<- function(i=10,maxi=N){
ggplot(data=data.frame(x="progress",y=i/maxi),
aes(x=x,y=y))+geom_bar(stat="identity",color=NA,fill="#0033a0",alpha=0.82)+
geom_bar(stat="identity", data=data.frame(x="progress",y=1),
color="black",fill=NA)+
theme_void()+scale_y_continuous(limits=c(0,1))+
theme(plot.title=element_text(size=8,hjust=0.1))+
labs(title="Animation progress")+
coord_flip()
}
g.progress(10)
library(ggplot2)
g.progress(10)
g.progress(20)
shiny::runApp('surfdrive/Shiny-project/VolcaNoseR')
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Movie with a plot
# R-Script for plotting time-series data, retrieved from FIJI and adding it to a movie
# Created by Joachim Goedhart (@joachimgoedhart), first version 2020
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
require(ggplot2)
require(gganimate)
require(tidyr)
require(dplyr)
require(magrittr)
#Read the results file generated by FIJI
df_results <- read.csv("Results.csv")
#Split the column 'Label' into three separate columns, using the colon as delimiter
df_tidy <- df_results %>% separate(Label,c("filename", "Sample","Number"),sep=':')
#Rename column 'Slice' to 'Frame'
df_tidy <- df_tidy %>% rename(Frame = Slice)
#Normalize based on the average baseline intensity (frames 1-5)
df_tidy <- df_tidy %>% group_by(Sample) %>% mutate(`Normalized Intensity`=Mean/mean(Mean[1:5])) %>% ungroup()
#Read the number of frames
nframes <- length(unique(df_tidy$Frame))
# Code for an ordinary plot - uncomment to have to inspect the data
# p <- ggplot(df_tidy, aes(x=Frame, y=`Normalized Intensity`, color=Sample)) + geom_line(size=2) + geom_point(size=3)
# Generate the animation
animated_plot <- ggplot(df_tidy, aes(x=Frame, y=`Normalized Intensity`, color=Sample)) + geom_line(size=2) + geom_point(size=3) + transition_reveal(Frame)
#Do some formatting of the layout
animated_plot <- animated_plot + theme_light(base_size = 16)
animated_plot <- animated_plot + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
animated_plot <- animated_plot + theme(legend.position="none")
animated_plot <- animated_plot + facet_wrap(~Sample, nrow = 3, strip.position = "right") + theme(strip.background =element_rect(fill=NA, color='grey')) + theme(strip.text = element_text(colour = 'black'))
animation <- animate(animated_plot, nframes, renderer = magick_renderer())
#Save the GIF
image_write_gif(animation, 'animation.gif')
shiny::runApp('surfdrive/Shiny-project/VolcaNoseR')
shiny::runApp('surfdrive/Shiny-project/VolcaNoseR')
source('~/surfdrive/Shiny-project/Tooltip/app.R')
shiny::runApp('surfdrive/Shiny-project/VolcaNoseR')
?read_excel()
library(readxl)
library(readxl)
?read_excel()
shiny::runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/Read_the_right_excel_sheet')
runApp('surfdrive/Shiny-project/Read_the_right_excel_sheet')
read_xl
runApp('surfdrive/Shiny-project/Read_the_right_excel_sheet')
runApp('surfdrive/Shiny-project/Read_the_right_excel_sheet')
runApp('surfdrive/Shiny-project/Read_the_right_excel_sheet')
runApp('surfdrive/Shiny-project/Read_the_right_excel_sheet')
runApp('surfdrive/Shiny-project/Read_the_right_excel_sheet')
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/Read_the_right_excel_sheet')
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
shiny::runApp('surfdrive/Shiny-project/VolcaNoseR')
1:5
x <- 1:4
x
as.character(x)
y <- as.character(x)
y
?which
which(y,"3")
which(y=="3")
which(y=="2")
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
strsplit('import.csv',".")
strsplit("import.csv",".")
strsplit("import.csv",".")[[1]]
gsub("import.csv", pattern="\\..*")
gsub("import.csv", pattern="\\..*", replacement="")
strsplit('name1.csv', '[.]')[[1]]
file_ext("blah.txt")
strsplit('name1.csv', '[.]')[[1]][1]
strsplit('name1.csv', '[.]')[[1]][2]
strsplit('name1.xlsx', '[.]')[[1]][2]
shiny::runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/Button_isolate')
runApp('surfdrive/Shiny-project/VolcaNoseR')
?read.csv()
?case_when
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
shiny::runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
runApp('surfdrive/Shiny-project/VolcaNoseR')
shiny::runApp('surfdrive/Shiny-project/VolcaNoseR')
shiny::runApp('surfdrive/Shiny-project/BA-plotter')
?shapiro.test()
shapiro.test(rnorm(100, mean = 5, sd = 3))
# Allow files up to 10 Mb
options(shiny.maxRequestSize=10*1024^2)
x <- shapiro.test(rnorm(100, mean = 5, sd = 3))
View(x)
x[2]
x[1]
runApp('surfdrive/Shiny-project/BA-plotter')
runApp('surfdrive/Shiny-project/BA-plotter')
runApp('surfdrive/Shiny-project/BA-plotter')
runApp('surfdrive/Shiny-project/BA-plotter')
runApp('surfdrive/Shiny-project/BA-plotter')
runApp('surfdrive/Shiny-project/BA-plotter')
runApp('surfdrive/Shiny-project/BA-plotter')
setwd("~/surfdrive/Shiny-project/BA-plotter")
library(ggplot2)
library(magrittr)
library(dplyr)
df_example_1 <- read.csv("df_SystBloodPressure.csv", na.strings = "")
df_example_2 <- read.csv("df_PlasmaVolume.csv", na.strings = "")
df_example_3 <- read.csv("df_T4.csv", na.strings = "")
df <- df_example_1
df$Measurement_1 <- df$J1
df$Measurement_2 <- df$R1
df <- df %>% mutate(Difference = Measurement_1-Measurement_2, Average = 0.5*Measurement_1+0.5*Measurement_2, Ratio=Measurement_1/Measurement_2, Percentage=100*Difference/(Average))
linearMod <- lm(Difference ~ Average, data=df)
linearMod$coefficients[1]
linearMod$residuals
residuals(linearMod)
df$residuals <- linearMod$residuals
df$predicted <- predict(linearMod)
ggplot(df) +aes(x=Average)+aes(y=Difference)+geom_point()+geom_line(aes(x=Average,y=predicted))
ggplot(df) +aes(x=Average)+aes(y=residuals)+geom_point()
ggplot(df) +aes(x=Average)+aes(y=abs(residuals))+geom_point()
df$bas_residuals <- abs(df$residuals)
ggplot(df) +aes(x=Average)+aes(y=abs_residuals)+geom_point()
df$abs_residuals <- abs(df$residuals)
ggplot(df) +aes(x=Average)+aes(y=abs_residuals)+geom_point()
ggplot(df) +aes(x=Average)+aes(y=residuals)+geom_point()
?lm
View(linearMod)
confint(linearMod, 'Average', level=0.95)
confint(linearMod, level=0.95)
x <- confint(linearMod, level=0.95)
View(x)
ggplot(df) +aes(x=Average)+aes(y=residuals)+geom_point()
x <- confint(linearMod, level=0.95)
print("The 95% CI of the intercept", x)
print(paste("The 95% CI of the intercept", x, sep=))
print(paste("The 95% CI of the intercept", x[1,1], "to",x[1,2] sep=))
print(paste("The 95% CI of the intercept ranges from", x[1,1], "to",x[1,2], sep=))
print(paste("The 95% CI of the slope ranges from", x[2,1], "to",x[2,2], sep=))
x <- round(confint(linearMod, level=0.95),2)
print(paste("The 95% CI of the intercept ranges from", x[1,1], "to",x[1,2], sep=))
print(paste("The 95% CI of the slope ranges from", x[2,1], "to",x[2,2], sep=))
head(df)
df[1]
df[2]
df[3]
head(df_example_3)
df_example_3[2]
df$Measurement_1 <- df_example_3[2]
df$Measurement_2 <- df_example_3[3]
df <- df_example_3
df$Measurement_1 <- df_example_3[2]
df$Measurement_2 <- df_example_3[3]
head(df)
df_example_3 <- read.csv("df_T4.csv", na.strings = "")
df <- df_example_3
df$Measurement_1 <- df[2]
df$Measurement_2 <- df[3]
View(df)
df <- df_example_3
df$Measurement_1 <- df$T4A
df$Measurement_2 <- df$T4X
View(df)
df <- df %>% mutate(Difference = Measurement_1-Measurement_2, Average = 0.5*Measurement_1+0.5*Measurement_2, Ratio=Measurement_1/Measurement_2, Percentage=100*Difference/(Average))
linearMod <- lm(Difference ~ Average, data=df)
linearMod$coefficients[1]
linearMod$residuals
residuals(linearMod)
df$residuals <- linearMod$residuals
df$abs_residuals <- abs(df$residuals)
df$predicted <- predict(linearMod)
ggplot(df) +aes(x=Average)+aes(y=Difference)+geom_point()+geom_line(aes(x=Average,y=predicted))
ggplot(df) +aes(x=Average)+aes(y=residuals)+geom_point()
x <- round(confint(linearMod, level=0.95),2)
print(paste("The 95% CI of the intercept ranges from", x[1,1], "to",x[1,2], sep=))
print(paste("The 95% CI of the slope ranges from", x[2,1], "to",x[2,2], sep=))
ggplot(df) +aes(x=Average)+aes(y=Difference)+geom_point()+geom_line(aes(x=Average,y=predicted))
as.data.frame(x)
y <- as.data.frame(x)
View(y)
View(x)
y$`2.5 %`
y <- as.data.frame(lo=x[1], hi=x[2])
x[1]
x[2]
x[1,]
x[,1]
y <- as.data.frame(lo=x[,1], hi=x[,2])
x[,2]
y <- data.frame(lo=x[,1], hi=x[,2])
View(y)
x <- round(confint(linearMod, level=0.95),2)
y <- data.frame(lo=x[,1], hi=x[,2])
View(y)
View(x)
y <- t(data.frame(lo=x[,1], hi=x[,2]))
View(y)
y <- (data.frame(lo=x[,1], hi=x[,2]))
View(y)
if ((y[1,1] < 0 && y[1,2] > 0) || (y[1,1] > 0 && y[1,2] < 0))
)
((y[1,1] < 0 && y[1,2] > 0) || (y[1,1] > 0 && y[1,2] < 0))
y$lo[2]
((y$lo[1] < 0 && y$hi[1] > 0) || (y$lo[1] > 0 && y$lo[1] < 0))
if ((y$lo[1] < 0 && y$hi[1] > 0) || (y$lo[1] > 0 && y$lo[1] < 0)) {print("Intercept likely through zero")}
if ((y$lo[1] < 0 && y$hi[1] > 0) || (y$lo[1] > 0 && y$lo[1] < 0)) {print("Intercept likely through zero")} else {print("Intercept unlikely through zero"}
if ((y$lo[1] < 0 && y$hi[1] > 0) || (y$lo[1] > 0 && y$lo[1] < 0)) {print("Intercept likely through zero")} else {print("Intercept unlikely through zero")}
if ((y$lo[2] < 0 && y$hi[2] > 0) || (y$lo[2] > 0 && y$lo[2] < 0)) {print("Slope likely through zero")} else {print("Slope unlikely through zero")}
if ((y$lo[2] < 0 && y$hi[2] > 0) || (y$lo[2] > 0 && y$lo[2] < 0)) {print("Slope likely zero")} else {print("Slope unlikely zero")}
if ((y$lo[1] < 0 && y$hi[1] > 0) || (y$lo[1] > 0 && y$lo[1] < 0)) {print("Intercept likely through zero")} else {print("Intercept unlikely through zero")}
if ((y$lo[2] < 0 && y$hi[2] > 0) || (y$lo[2] > 0 && y$lo[2] < 0)) {print("Slope likely zero")} else {print("Slope unlikely zero")}
print(paste("The 95% CI of the intercept ranges from", x[1,1], "to",x[1,2], sep=))
print(paste("The 95% CI of the slope ranges from", x[2,1], "to",x[2,2], sep=))
setwd("~/surfdrive/R-project/COVID-19_DataViz")
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# DataViz-COVID: Script for plotting COVID-19 data, retrieved from CSSEGISandData
# Created by Joachim Goedhart (@joachimgoedhart), first version 2020
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
library(tidyverse)
library(ggrepel)
library(gganimate)
library(lubridate)
library(gifski)
#From Color Universal Design (CUD): https://jfly.uni-koeln.de/color/
Okabe_Ito <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
newColors <- Okabe_Ito
#This number defines the threshold number of cases to define 'days of onset'
cutoff <- 100
################################# Data loading and wrangling ########################
#Data wrangling adapted from: https://rviews.rstudio.com/2020/03/05/covid-19-epidemiology-with-r/
#Define URL
jhu_cases_url <- paste("https://raw.githubusercontent.com/CSSEGISandData/",
"COVID-19/master/csse_covid_19_data/", "csse_covid_19_time_series/",
"time_series_covid19_confirmed_global.csv", sep = "")
jhu_deaths_url <- paste("https://raw.githubusercontent.com/CSSEGISandData/",
"COVID-19/master/csse_covid_19_data/", "csse_covid_19_time_series/",
"time_series_covid19_deaths_global.csv", sep = "")
#Read the data from the URL
df_cases <- read.csv(jhu_cases_url,check.names=FALSE)
df_deaths <- read.csv(jhu_deaths_url,check.names=FALSE)
#Reshape the data into a long/tidy format
df_long_cases <- df_cases %>% rename(province = "Province/State", country_region = "Country/Region") %>%
pivot_longer(-c(province, country_region, Lat, Long), names_to = "Date", values_to = "cumulative_cases")
df_long_deaths <- df_deaths %>% rename(province = "Province/State", country_region = "Country/Region") %>%
pivot_longer(-c(province, country_region, Lat, Long), names_to = "Date", values_to = "cumulative_deaths") %>% select('province', 'country_region', 'Date', 'cumulative_deaths')
#Combine 'confirmed cases' and 'deaths' in a single dataframe
df_cum <- df_long_cases %>% left_join(df_long_deaths, by=c('country_region','Date','province'))
# Change date format, sort by date, remove cruise ship data
df_cum <- df_cum %>% mutate(Date = mdy(Date) ) %>%
#  filter(country_region == "US") %>%
arrange(province, Date) %>%
ungroup() %>% filter(str_detect(province, "Diamond Princess", negate = TRUE))
# %>% select(-c(country_region, Lat, Long, cumulative_cases))
#Collapse province data into data per country/region
df_cum <- df_cum %>% group_by(country_region,Date) %>%
summarise(cumulative_cases=sum(cumulative_cases), cumulative_deaths=sum(cumulative_deaths)) %>% ungroup()
#Calculate incidents per day
df_cum <- df_cum %>% group_by(country_region) %>% mutate(incident_cases = c(0, diff(cumulative_cases))) %>% ungroup()
#Calculate deaths per day
df_cum <- df_cum %>% group_by(country_region) %>% mutate(incident_deaths = c(0, diff(cumulative_deaths))) %>% ungroup()
#Rename several countries for compatibility with the population data
df_cum <- df_cum %>%
mutate(country_region = recode(country_region,
'Taiwan*' = "Taiwan",
Czechia = "Czech Republic",
US = "United States",
'Korea, South' = "South Korea")
)
#Read population data, source: https://worldpopulationreview.com
df_pop <- read.csv("https://raw.githubusercontent.com/JoachimGoedhart/COVID-19_DataViz/master/pop_data.csv") %>% select('name','pop2020') %>% rename(country_region="name")
#Add population data
df_cum <- left_join(df_cum,df_pop, by="country_region")
#Calculate cases per 100,000 inhabitants
df_cum <- df_cum %>% mutate(cases_per_100k = cumulative_cases/pop2020*100, deaths_per_100k = cumulative_deaths/pop2020*100, inc_deaths_per_100k = incident_deaths/pop2020*100)
#Generate a dataframe that synchronizes data by 'date of onset', defined by cutoff
df_sync <- df_cum %>% filter(cases_per_100k >= 0.1) %>%  group_by(country_region) %>%
mutate(days_after_onset = row_number()) %>% ungroup()
# Read a list of countries that belong to Europe
countries_of_europe <- read.csv("https://raw.githubusercontent.com/JoachimGoedhart/COVID-19_DataViz/master/countries_of_europe.csv", header = FALSE) %>% unlist(use.names = FALSE)
#Filter the dataframe, leaving only European countries
df_sync_eu <- df_sync %>% filter(country_region %in% countries_of_europe)
# Save the dataframe in CSV format
write.csv(df_sync_eu,"COVID_EU.csv")
################################# Plot cases vs days of onset ########################
source("line_plot.R")
#Select a number of countries
df_sync_eu_selected <- df_sync_eu %>% filter(country_region %in% c('Italy', 'France', 'Spain','Germany','United Kingdom', 'Netherlands','Norway'))
onset_plot <- line_plot(df=df_sync_eu_selected, x_var=days_after_onset,y_var=cases_per_100k, group_var=country_region)
#Define labels
onset_plot <- onset_plot + labs(title = 'Total number of confirmed cases versus days after case #100', subtitle  = "Data from: https://github.com/CSSEGISandData/COVID-19", y="Cases per 100.000 inhabitants (log-scale)", x="Days after confirmed case #100")
png(file="COVID_EU_cases_onset.png", height = 600, width = 600)
print(onset_plot)
dev.off()
################################# Plot deaths per day corrected for pop ########################
#Filter for larger countries and date
df_cum_eu <- df_cum %>% filter(country_region %in% countries_of_europe) %>% filter(pop2020>10100) %>% filter(Date > "2020-03-01")
#Order
reordered_list <- reorder(df_cum_eu$country_region, df_cum_eu$inc_deaths_per_100k, max, na.rm = TRUE)
ordered_list <- levels(reordered_list)
df_cum_eu$country_region <- factor(df_cum_eu$country_region, levels = ordered_list, ordered = TRUE)
source("small_multiple.R")
incidence_plot <- small_multiple(df_cum_eu, Date, inc_deaths_per_100k, country_region)
incidence_plot <- incidence_plot + labs(title = 'Number of new COVID-19 related deaths per day (corrected for population)', subtitle  = "Data from: https://github.com/CSSEGISandData/COVID-19", y="Deaths per 100.000 inhabtitants", x="Days")
png(file="COVID_EU_deaths.png", height = 600, width = 800)
print(incidence_plot)
dev.off()
################################# Generate animation ########################
#Filter the dataframe, leaving only European countries
df_cum_eu <- df_cum %>% filter(country_region %in% countries_of_europe)
#Order
reordered_list <- reorder(df_cum_eu$country_region, df_cum_eu$cumulative_cases, max, na.rm = TRUE)
ordered_list <- levels(reordered_list)
#Set new order
df_cum_eu$country_region <- factor(df_cum_eu$country_region, levels = ordered_list, ordered = TRUE)
source("animated_bars.R")
#Set the starting date
df_cum_filtered <-  df_cum_eu %>% filter(Date > "2020-03-01")
anim <- animated_bars(df_cum_filtered, cumulative_cases, 20)
#Define labels
anim <- anim + labs(title = 'Total number of confirmed cases on: {closest_state}', subtitle  = "Data from: https://github.com/CSSEGISandData/COVID-19", y="", x="")
#Save the animation as a GIF
animate(anim, 200, fps = 10,  width = 800, height = 800, renderer = gifski_renderer("COVID_EU.gif"))
setwd("~/surfdrive/Shiny-project/BA-plotter")
library(ggplot2)
library(magrittr)
library(dplyr)
df_example_1 <- read.csv("df_SystBloodPressure.csv", na.strings = "")
df_example_2 <- read.csv("df_PlasmaVolume.csv", na.strings = "")
df_example_3 <- read.csv("df_T4.csv", na.strings = "")
df <- df_example_3
# df$Measurement_1 <- df$J1
# df$Measurement_2 <- df$R1
df$Measurement_1 <- df$T4A
df$Measurement_2 <- df$T4X
df <- df %>% mutate(Difference = Measurement_1-Measurement_2, Average = 0.5*Measurement_1+0.5*Measurement_2, Ratio=Measurement_1/Measurement_2, Percentage=100*Difference/(Average))
linearMod <- lm(Difference ~ Average, data=df)
linearMod$coefficients[1]
linearMod$residuals
residuals(linearMod)
df$residuals <- linearMod$residuals
df$abs_residuals <- abs(df$residuals)
df$predicted <- predict(linearMod)
ggplot(df) +aes(x=Average)+aes(y=Difference)+geom_point()+geom_line(aes(x=Average,y=predicted))
ggplot(df) +aes(x=Average)+aes(y=residuals)+geom_point()
x <- round(confint(linearMod, level=0.95),2)
y <- (data.frame(lo=x[,1], hi=x[,2]))
if ((y$lo[1] < 0 && y$hi[1] > 0) || (y$lo[1] > 0 && y$lo[1] < 0)) {print("Intercept likely through zero")} else {print("Intercept unlikely through zero")}
if ((y$lo[2] < 0 && y$hi[2] > 0) || (y$lo[2] > 0 && y$lo[2] < 0)) {print("Slope likely zero")} else {print("Slope unlikely zero")}
print(paste("The 95% CI of the intercept ranges from", x[1,1], "to",x[1,2], sep=))
print(paste("The 95% CI of the slope ranges from", x[2,1], "to",x[2,2], sep=))
ggplot(df) +aes(x=Average)+aes(y=Difference)+geom_point()+geom_line(aes(x=Average,y=predicted))
View(y)
setwd("~/surfdrive/Shiny-project/BA-plotter")
library(ggplot2)
library(magrittr)
library(dplyr)
df_example_1 <- read.csv("df_SystBloodPressure.csv", na.strings = "")
df_example_2 <- read.csv("df_PlasmaVolume.csv", na.strings = "")
df_example_3 <- read.csv("df_T4.csv", na.strings = "")
df <- df_example_3
# df$Measurement_1 <- df$J1
# df$Measurement_2 <- df$R1
df$Measurement_1 <- df$T4A
df$Measurement_2 <- df$T4X
df <- df %>% mutate(Difference = Measurement_1-Measurement_2, Average = 0.5*Measurement_1+0.5*Measurement_2, Ratio=Measurement_1/Measurement_2, Percentage=100*Difference/(Average))
linearMod <- lm(Difference ~ Average, data=df)
linearMod$coefficients[1]
linearMod$residuals
residuals(linearMod)
df$residuals <- linearMod$residuals
df$abs_residuals <- abs(df$residuals)
df$predicted <- predict(linearMod)
ggplot(df) +aes(x=Average)+aes(y=Difference)+geom_point()+geom_line(aes(x=Average,y=predicted))
ggplot(df) +aes(x=Average)+aes(y=residuals)+geom_point()
x <- round(confint(linearMod, level=0.95),2)
y <- (data.frame(lo=x[,1], hi=x[,2]))
if ((y$lo[1] < 0 && y$hi[1] > 0) || (y$lo[1] > 0 && y$lo[1] < 0)) {print("Intercept likely through zero")} else {print("Intercept unlikely through zero")}
if ((y$lo[2] < 0 && y$hi[2] > 0) || (y$lo[2] > 0 && y$lo[2] < 0)) {print("Slope likely zero")} else {print("Slope unlikely zero")}
print(paste("The 95% CI of the intercept ranges from", x[1,1], "to",x[1,2], sep=))
print(paste("The 95% CI of the slope ranges from", x[2,1], "to",x[2,2], sep=))
View(linearMod)
linearMod$coefficients[1]
linearMod$coefficients
View(y)
df_coef <- data.frame(linearMod$coefficients)
View(df_coef)
View(df_coef)
View(y)
data.frame(avg=linearMod$coefficients)
df_coef <- rbind(df_coef,y)
df_coef <- df_coef %>% left_join(df_coef,y)
df_coef <- df_coef %>% left_join(y)
View(df_coef)
View(y)
print(y)
df_coef <-bind_cols(df_coef,y)
View(df_coef)
shiny::runApp('~/surfdrive/Shiny-project/PlotsOfData')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
linearModRes <- lm(abs_residuals ~ Average, data=df)
linearModRes$coefficients
linearMod$coefficients[1]
linearMod$coefficients[1]
b0 <- linearMod$coefficients[1]
b1 <- linearMod$coefficients[2]
df <- df %>% mutate(LoA_regr_hi = b0+b1*Average+2.46*(c0+c1*Average), LoA_regr_lo = b0+b1*Average-2.46*(c0+c1*Average))
b0 <- linearMod$coefficients[1]
b1 <- linearMod$coefficients[2]
linearMod$residuals
residuals(linearMod)
df$residuals <- linearMod$residuals
df$abs_residuals <- abs(df$residuals)
linearModRes <- lm(abs_residuals ~ Average, data=df)
linearModRes$coefficients
c0 <- linearModRes$coefficients[1]
c1 <- linearModRes$coefficients[2]
df <- df %>% mutate(LoA_regr_hi = b0+b1*Average+2.46*(c0+c1*Average), LoA_regr_lo = b0+b1*Average-2.46*(c0+c1*Average))
View(df)
ggplot(df) +aes(x=Average)+aes(y=Difference)+geom_point()+geom_line(aes(x=Average,y=predicted))
+geom_line(aes(x=Average,y=LoA_regr_hi))
View(df)
ggplot(df) +aes(x=Average)+aes(y=Difference)+geom_point()+geom_line(aes(x=Average,y=predicted))+geom_line(aes(x=Average,y=LoA_regr_hi))
ggplot(df) +aes(x=Average)+aes(y=Difference)+geom_point()+geom_line(aes(x=Average,y=predicted))+geom_line(aes(x=Average,y=LoA_regr_hi))+geom_line(aes(x=Average,y=LoA_regr_lo))
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
runApp('~/surfdrive/Shiny-project/BA-plotter')
